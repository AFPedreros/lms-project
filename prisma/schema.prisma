

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url  	  = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Topic {
    id            String        @id @default(cuid())
    name          String
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    categories    Category[]
    subCategories SubCategory[]
    tutorials     Tutorial[]
    isPublished   Boolean       @default(false)
    createdBy     User          @relation(fields: [createdById], references: [id])
    createdById   String

    @@index([name])
}

model Tutorial {
  id           String          @id @default(cuid())
  title        String
  description  String? 
  videoUrl     String? 
  position     Int
  isPublished  Boolean         @default(false)
  isFree       Boolean         @default(false)
  courseId     String           
  topic        Topic           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]  
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String   
  chapter     Tutorial @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Category {
    id            String        @id @default(cuid())
    name          String
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    subCategories SubCategory[]
    topics        Topic[]
    createdBy     User          @relation(fields: [createdById], references: [id])
    createdById   String
}

model SubCategory {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    topics      Topic[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    topics        Topic[]
    categories    Category[]
    subCategories SubCategory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}