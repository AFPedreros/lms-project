

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url  	  = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Topic {
  id              String             @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  createdAt     DateTime             @default(now())
  updatedAt       DateTime           @updatedAt
  tutorials       Tutorial[]
  isPublished     Boolean            @default(false)
  createdBy       User               @relation(fields: [createdById], references: [id])
  createdById     String
  categories      Category[]         @relation("TopicCategories")
  topicCategories TopicCategory[]
  subCategories   SubCategoryTopic[]
  
  @@index([name])
}

model Tutorial {
  id           String          @id @default(cuid())
  name         String
  description  String? 
  videoUrl     String? 
  position     Int
  isPublished  Boolean         @default(false)
  isFree       Boolean         @default(false)
  topicId      String           
  topic        Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]  
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  createdBy     User          @relation(fields: [createdById], references: [id])
  createdById  String
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  tutorialId   String   
  tutorial     Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, tutorialId])
}

model TopicCategory {
  topicId    String
  categoryId String
  topic      Topic    @relation(fields: [topicId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([topicId, categoryId])
}

model Category {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]
  topics        Topic[]       @relation("TopicCategories")
  topicCategories TopicCategory[]
  createdBy     User          @relation(fields: [createdById], references: [id])
  createdById   String
}

model SubCategoryTopic {
  subCategoryId String
  topicId       String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  topic         Topic        @relation(fields: [topicId], references: [id])

  @@id([subCategoryId, topicId])
}


model SubCategory {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    topics      SubCategoryTopic[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    topics        Topic[]
    tutorials     Tutorial[]
    categories    Category[]
    subCategories SubCategory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}